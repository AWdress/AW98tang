name: Docker Build

on:
  push:
    paths:
      - 'Dockerfile'  # Âè™ÊúâDockerfileÂèòÂåñÊó∂Ëß¶Âèë
    tags:
      - 'v*'  # Ê≠£ÂºèÁâàÊú¨Ê†áÁ≠æ (v1.0.0, v1.1.0Á≠â)
  workflow_dispatch:  # ÂÖÅËÆ∏ÊâãÂä®Ëß¶Âèë

env:
  DOCKER_HUB_REGISTRY: docker.io
  DOCKER_HUB_IMAGE: awdress/aw98tang

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # Âè™Âú®Ê†áÁ≠æÊé®ÈÄÅÊàñÊâãÂä®Ëß¶ÂèëÊó∂ÊâßË°å
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_main: ${{ steps.version.outputs.is_main }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_HUB_REGISTRY }}
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}  # Docker HubËÆøÈóÆ‰ª§Áâå‰Ωú‰∏∫ÂØÜÁ†Å‰ΩøÁî®

    - name: Get version from git
      id: version
      run: |
        if [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
          # Ê†áÁ≠æÊé®ÈÄÅÔºö‰ΩøÁî®Ê†áÁ≠æÂêç‰Ωú‰∏∫ÁâàÊú¨Âè∑
          VERSION="${{ github.ref_name }}"
          
          # Âà§Êñ≠ÊòØÂê¶‰∏∫Ê≠£ÂºèÁâàÊú¨ËøòÊòØdevÁâàÊú¨
          if [[ "${{ github.ref_name }}" == v* ]]; then
            echo "is_main=true" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "build_type=release" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == dev* ]]; then
            echo "is_main=false" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "build_type=dev" >> $GITHUB_OUTPUT
          else
            echo "is_main=false" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "build_type=other" >> $GITHUB_OUTPUT
          fi
        else
          # ÊâãÂä®Ëß¶ÂèëÔºö‰ΩøÁî®latest
          VERSION="latest"
          echo "is_main=true" >> $GITHUB_OUTPUT
          echo "is_release=false" >> $GITHUB_OUTPUT
          echo "build_type=manual" >> $GITHUB_OUTPUT
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Extract metadata for Docker Hub
      id: meta-dockerhub
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_HUB_IMAGE }}
        tags: |
          type=raw,value=${{ steps.version.outputs.version }}
          type=raw,value=${{ steps.version.outputs.is_release == 'true' && 'latest' || '' }}
        labels: |
          org.opencontainers.image.title=AW98tang
          org.opencontainers.image.description=Ëâ≤Ëä±Â†ÇÊô∫ËÉΩÂä©Êâã Pro - Êô∫ËÉΩËá™Âä®ÂåñÁ≥ªÁªü
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.url=https://github.com/${{ github.repository }}

    - name: Build and push to Docker Hub
      uses: docker/build-push-action@v5
      id: build
      with:
        context: .
        platforms: linux/amd64  # Âè™ÊûÑÂª∫AMD64ÔºåÈÄüÂ∫¶Êõ¥Âø´
        push: true
        tags: ${{ steps.meta-dockerhub.outputs.tags }}
        labels: ${{ steps.meta-dockerhub.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta-dockerhub.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.meta-dockerhub.outputs.json).labels['org.opencontainers.image.version'] }}

    - name: Generate summary
      run: |
        echo "## üê≥ Docker Image Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "**Tag:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Platform:** linux/amd64" >> $GITHUB_STEP_SUMMARY
        echo "**Build Type:** ${{ steps.version.outputs.build_type }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.version.outputs.is_release }}" == "true" ]; then
          echo "**Release:** ‚úÖ Official Release" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ steps.version.outputs.build_type }}" == "dev" ]; then
          echo "**Release:** üîß Development Build" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Release:** üîÑ Manual Build" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ Built Images" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### Docker Hub" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta-dockerhub.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üè∑Ô∏è Image Tags" >> $GITHUB_STEP_SUMMARY
        echo "#### Docker Hub" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta-dockerhub.outputs.tags }}" | tr ' ' '\n' | while read tag; do
          echo "- \`$tag\`" >> $GITHUB_STEP_SUMMARY
        done
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Usage" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "# Pull from Docker Hub" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.DOCKER_HUB_IMAGE }}:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Run the container" >> $GITHUB_STEP_SUMMARY
        echo "docker run -d --name aw98tang ${{ env.DOCKER_HUB_IMAGE }}:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && needs.build-and-push.outputs.is_release == 'true'
    permissions:
      contents: read
    
    steps:
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_HUB_REGISTRY }}
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}  # Docker HubËÆøÈóÆ‰ª§Áâå‰Ωú‰∏∫ÂØÜÁ†Å‰ΩøÁî®

    - name: Check if image exists
      run: |
        echo "Checking if image ${{ env.DOCKER_HUB_IMAGE }}:${{ needs.build-and-push.outputs.version }} exists..."
        docker pull ${{ env.DOCKER_HUB_IMAGE }}:${{ needs.build-and-push.outputs.version }} || echo "Image pull failed, will try Trivy scan anyway"

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: ${{ env.DOCKER_HUB_IMAGE }}:${{ needs.build-and-push.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Check Trivy results
      run: |
        if [ -f "trivy-results.sarif" ]; then
          echo "‚úÖ Trivy scan completed successfully"
          echo "File size: $(wc -c < trivy-results.sarif) bytes"
        else
          echo "‚ö†Ô∏è Trivy scan failed or no results file generated"
        fi


  notify:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: always() && github.event_name == 'push'
    
    steps:
    - name: Notify build status
      run: |
        if [ "${{ needs.build-and-push.result }}" == "success" ]; then
          echo "‚úÖ Docker image build successful!"
          echo "Docker Hub: ${{ env.DOCKER_HUB_IMAGE }}:${{ needs.build-and-push.outputs.version }}"
        else
          echo "‚ùå Docker image build failed!"
        fi
